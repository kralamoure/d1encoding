@startuml
|Client|
|#AntiqueWhite|Server|
start
:""AksHelloConnect""
....
* Salt;
|Client|
:""AccountVersion""
....
* Version;
|Client|
:""AccountCredential""
....
* Username
* CryptoMethod
* Password;
:""AccountQueueRequest"";
|Server|
if (Bad version?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: BadVersion;
    stop
else if (Wrong credentials?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: AccessDenied;
    stop
else if (Already logged?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: AlreadyLogged;
    stop
else if (Already logged in a game server?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: AlreadyLoggedGameServer;
    stop
else if (Not Player?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: NotPlayer;
    stop
else if (Disconnected an account?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: UDisconnectAccount;
    stop
else if (Kicked?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: Kicked
    * Arguments: days, hours, minutes;
    stop
else if (Server Full?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: ServerFull;
    stop
else if (Old Account?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: OldAccount;
    stop
else if (Old Account, use new?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: OldAccountUseNew;
    stop
else if (Account in maintenance?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: MaintainAccount;
    stop
else if (Account should choose nickname?) then (yes)
    :""AccountLoginError""
    ....
    * Reason: ChooseNickname;
    |Client|
    :""AccountSetNickname""
    ....
    * Nickname;
    |Server|
    if (Nickname already used?) then (yes)
        :""AccountLoginError""
        ....
        * Reason: NickAlreadyUsed;
        :Repeat;
    else (no)
      :Continue;
    endif
    detach
else (no)
endif
:""AccountPseudo""
....
* Pseudo;
:""AccountSecretQuestion""
....
* SecretQuestion;
:""AccountCommunity""
....
* Community;
:""AccountHosts""
....
* Hosts;
:""AccountLoginSuccess""
....
* Authorized;
|Client|
:""AccountGetServersList"";
|Server|
:""AccountServersListSuccess""
....
* Subscription
* ServerCharacters;
|Client|
:""AccountSetServer""
....
* Id;
|Server|
if (Can't choose character, server down?) then (yes)
    :""AccountSelectServerError""
    ....
    * Reason: CantChooseCharacterServerDown;
    detach
else if (Can't choose character, server full?) then (yes)
    :""AccountSelectServerError""
    ....
    * Reason: CantChooseCharacterServerFull
    * Extra: available servers;
    detach
else if (Server full?) then (yes)
    :""AccountSelectServerError""
    ....
    * Reason: ServerFull;
    detach
else if (Can't choose character, shop other server?) then (yes)
    :""AccountSelectServerError""
    ....
    * Reason: CantChooseCharacterShopOtherServer;
    detach
else if (Can't select this server?) then (yes)
    :""AccountSelectServerError""
    ....
    * Reason: CantSelectThisServer;
    detach
else (no)
if (Send encrypted address?) then (yes)
    :""AccountSelectServerSuccess""
    ....
    * Host
    * Port
    * Ticket;
else (no)
    :""AccountSelectServerPlainSuccess""
    ....
    * Host
    * Port
    * Ticket;
endif
stop
@enduml
